//Time Complexity-O(N^2)
//space Complexity->O(N)
import java.io.*;
import java.util.*;
public class Solution{
	public static ArrayList<Integer> kMaxSumCombination(ArrayList<Integer> a, ArrayList<Integer> b, int n, int k){
		// Write your code here.
        PriorityQueue<Integer> pq=new PriorityQueue<>(Collections.reverseOrder());
        ArrayList<Integer> list=new ArrayList<>();
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                int val1=a.get(i);
                int val2=b.get(j);
                int sum=val1+val2;
           pq.add(sum);
            }
        }
        
        while(k-->0){
            list.add(pq.remove());
        }
        return list;
	}
}