/************************************************************

    Following is the TreeNode class structure

    class TreeNode {
	int val;
	TreeNode left;
	TreeNode right;

	TreeNode(int val) {
		this.val = val;
		this.left = null;
		this.right = null;
	   }
	}


************************************************************/
import java.io.*;
import java.util.*;
public class Solution {
    static class Pair{
        TreeNode node;
        int idx;
        Pair(TreeNode node,int idx){
            this.node=node;
            this.idx=idx;
        }
    }
	public static int getMaxWidth(TreeNode root) {
		// Write your code here.
        if(root==null) return 0;
      LinkedList<Pair> queue=new LinkedList<>();
        queue.add(new Pair(root,0));
        int width=Integer.MIN_VALUE;
        while(queue.size()>0){
//             Pair rem=queue.remove();
//             int left=queue.getFirst().idx;
//             int right=queue.getLast().idx;
//             int len=right-left;
            width=Math.max(width,queue.size());
            int size=queue.size();
            while(size-->0){
                Pair rem=queue.remove();
                  if(rem.node.left!=null){
                queue.add(new Pair(rem.node.left,rem.idx-1));
            }
            if(rem.node.right!=null){
                queue.add(new Pair(rem.node.right,rem.idx+1));
            }
            }
        }
        
        return width;
	}
}

//   LinkedList<Pair> queue=new LinkedList<>();
//         queue.add(new Pair(root,0));
//         int width=Integer.MIN_VALUE;
//         while(queue.size()>0){
// //             Pair rem=queue.remove();
//             int left=queue.getFirst().idx;
//             int right=queue.getLast().idx;
//             int len=right-left+1;
//             if(len>width){
//                 width=len;
//             }
//             int size=queue.size();
//             while(size-->0){
//             Pair rem=queue.remove();
//             if(rem.node.left!=null){
//                 queue.add(new Pair(rem.node.left,2*rem.idx+1));
//             }
//             if(rem.node.right!=null){
//                 queue.add(new Pair(rem.node.right,2*rem.idx+2));
//             }
//             }
//         }
//         return width;