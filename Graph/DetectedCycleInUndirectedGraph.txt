class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean[] visited=new boolean[V];
        for(int i=0;i<V;i++){
            if(visited[i]==false){
           boolean ans=checkConnected(V,adj,i,visited);
           if(ans){
               return true;
           }
            }
        }
        return false;
    }
    public boolean checkConnected(int V, ArrayList<ArrayList<Integer>> adj,int src,boolean[] visited){
      
       ArrayDeque<Integer> queue = new ArrayDeque<>();
        queue.add(src);
        
        while(!queue.isEmpty()){
            int rem = queue.remove();
            
            if(visited[rem] == true)
                return true;
                
            visited[rem] = true;
            
            for(int nbr : adj.get(rem)){
                if(visited[nbr] == false){
                    queue.add(nbr);
                }
             
            }
        }
        return false;
    }
}