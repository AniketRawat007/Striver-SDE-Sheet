class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int v, ArrayList<ArrayList<Integer>> edges) 
    {
        // add your code here
    Stack<Integer> st=new Stack<>();
        // ArrayList<Integer>list=new ArrayList<>();
        boolean[] visited=new boolean[v];
        for(int i=0;i<v;i++){
            if(!visited[i]){
                dfs(edges,i,visited,st);
            }
        }
        
        int[] arr=new int[v];
        int idx=0;
        while(st.size()>0){
            arr[idx++]=st.pop();
        }
        return arr;
    }
    public static void dfs(ArrayList<ArrayList<Integer>> edges,int src,boolean[] visited, Stack<Integer> st){
        visited[src]=true;
        for(int nbr:edges.get(src)){
            if(!visited[nbr]){
                dfs(edges,nbr,visited,st);
            }
        }
        st.push(src);
    }
}

