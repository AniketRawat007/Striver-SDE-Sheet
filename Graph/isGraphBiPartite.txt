class Solution {
    static class Pair{
        int vtx;
        int level;
        Pair(int vtx,int level){
            this.vtx=vtx;
            this.level=level;
        }
    }
    public boolean isBipartite(int[][] graph) {
     Integer[] visited=new Integer[graph.length];
        for(int i=0;i<graph.length;i++){
            if(visited[i]==null){
                boolean ans=igb(graph,visited,i);
                if(ans==false){
                    return false;
                }
            }
        }
        return true;
    }
    public static boolean igb(int[][] graph,Integer[] visited,int src){
        ArrayDeque<Pair> queue=new ArrayDeque<>();
        queue.add(new Pair(src,1));
        
        while(queue.size()>0){
        Pair rem=queue.remove();
            if(visited[rem.vtx]!=null){
                int ov=visited[rem.vtx];
                int nv=rem.level%2;
                if(ov!=nv){
                    return false;
                }
            }
        visited[rem.vtx]=rem.level%2;
        for(int i=0;i<graph[rem.vtx].length;i++){
            if(visited[graph[rem.vtx][i]]==null){
                queue.add(new Pair(graph[rem.vtx][i],rem.level+1));
            }
        }
        }
        return true;
    }
}