//Approch-1) Using HashSet

  public static Node firstNode(Node head) 
    {
        //    Write your code here.
        HashSet<Node> set=new HashSet<>();
        while(head!=null){
            if(set.contains(head)){
                return head;
            }
            set.add(head);
            head=head.next;
        }
        return null;
    }

    //````````````````````````````````````````````````````````````````````````````````````````````````

    //Approch-2) Two-Pointers
   
    public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head==null || head.next==null) return null;
      ListNode fast = head;
    ListNode slow = head;
    
        
    while(fast.next != null&&fast.next.next != null) {
        slow = slow.next;
        fast = fast.next.next;
            
        if(slow == fast) {
            slow=head;
            while(slow != fast) {
                slow = slow.next;
                fast = fast.next;
            }
            return slow;
        }
    }
    return null;
    }
}